import React, { useState, useEffect } from 'react';
import { doc, getDoc } from 'firebase/firestore';
import { db } from '../firebase/config';

const ExchangeShift = ({ userData }) => {
  const isSupervisor = userData?.role === 'р╕лр╕▒р╕зр╕лр╕Щр╣Йр╕▓р╕лр╕Щр╣Ир╕зр╕вр╕Зр╕▓р╕Щ';
  const [currentView, setCurrentView] = useState('menu'); // 'menu', 'exchange', 'give'
  const [teamMembers, setTeamMembers] = useState([]);
  const [selectedMember, setSelectedMember] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [myShifts, setMyShifts] = useState({ top: '', bottom: '' });
  const [otherShifts, setOtherShifts] = useState({ top: '', bottom: '' });
  const [myShiftStyles, setMyShiftStyles] = useState({ top: {}, bottom: {} });
  const [otherShiftStyles, setOtherShiftStyles] = useState({ top: {}, bottom: {} });
  const [shiftOptions, setShiftOptions] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (userData?.department && !isSupervisor) {
      fetchTeamMembers();
      fetchShiftOptions();
    }
  }, [userData, isSupervisor]);

  const fetchTeamMembers = async () => {
    try {
      const teamRef = doc(db, 'teams', userData.department);
      const teamDoc = await getDoc(teamRef);
      
      if (teamDoc.exists()) {
        const members = teamDoc.data().members || [];
        console.log('All team members:', members);
        console.log('Current user role:', userData.role);
        console.log('Current user UID:', userData.uid);
        
        // р╕Бр╕гр╕нр╕Зр╕Др╕Щр╕Чр╕╡р╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕ер╕Бр╣Ар╕зр╕гр╣Др╕Фр╣Й
        const exchangeableMembers = members.filter(member => {
          console.log(`Checking member: ${member.firstName} ${member.lastName}, role: ${member.role}, id: ${member.id}`);
          
          // р╣Др╕бр╣Ир╕гр╕зр╕бр╕Хр╕▒р╕зр╣Ар╕нр╕З
          if (member.id === userData.uid) {
            console.log('Skipping self');
            return false;
          }
          
          // р╕Юр╕вр╕▓р╕Ър╕▓р╕ер╣Бр╕ер╕Бр╣Др╕Фр╣Йр╣Ар╕Йр╕Юр╕▓р╕░р╕Юр╕вр╕▓р╕Ър╕▓р╕е
          if (userData.role === 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е') {
            const canExchange = member.role === 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е';
            console.log(`Nurse can exchange with ${member.role}: ${canExchange}`);
            return canExchange;
          }
          
          // р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕ер╣Бр╕ер╕░р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Йр╣Бр╕ер╕Бр╕Бр╕▒р╕Щр╣Др╕Фр╣Й
          if (userData.role === 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е' || userData.role === 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й' || userData.role === 'р╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щр╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й') {
            const canExchange = member.role === 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е' || member.role === 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й' || member.role === 'р╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щр╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й';
            console.log(`Assistant can exchange with ${member.role}: ${canExchange}`);
            return canExchange;
          }
          
          console.log('No matching role condition');
          return false;
        });
        
        console.log('Exchangeable members:', exchangeableMembers);
        setTeamMembers(exchangeableMembers);
      } else {
        console.log('Team document does not exist');
      }
    } catch (error) {
      console.error('Error fetching team members:', error);
    }
  };

  const fetchShiftOptions = async () => {
    try {
      const shiftOptionsRef = doc(db, 'shiftOptions', userData.department);
      const shiftOptionsDoc = await getDoc(shiftOptionsRef);
      
      if (shiftOptionsDoc.exists()) {
        const options = shiftOptionsDoc.data().options || [];
        setShiftOptions(options);
      }
    } catch (error) {
      console.error('Error fetching shift options:', error);
    }
  };

  const handleExchangeClick = () => {
    setCurrentView('exchange');
  };

  const handleGiveClick = () => {
    setCurrentView('give');
  };

  const handleBackToMenu = () => {
    setCurrentView('menu');
    setSelectedMember('');
    setSelectedDate('');
    setMyShifts({ top: '', bottom: '' });
    setOtherShifts({ top: '', bottom: '' });
    setMyShiftStyles({ top: {}, bottom: {} });
    setOtherShiftStyles({ top: {}, bottom: {} });
  };

  const handleMemberChange = (e) => {
    setSelectedMember(e.target.value);
    setMyShifts({ top: '', bottom: '' });
    setOtherShifts({ top: '', bottom: '' });
    setMyShiftStyles({ top: {}, bottom: {} });
    setOtherShiftStyles({ top: {}, bottom: {} });
  };

  const handleDateChange = (e) => {
    setSelectedDate(e.target.value);
    if (selectedMember && e.target.value) {
      fetchShifts(selectedMember, e.target.value);
    }
  };

  const fetchShifts = async (memberId, date) => {
    setLoading(true);
    try {
      const dateObj = new Date(date);
      const monthKey = `${dateObj.getFullYear()}-${String(dateObj.getMonth() + 1).padStart(2, '0')}`;
      const dayIndex = dateObj.getDate() - 1;
      
      console.log('Fetching shifts for:', { memberId, date, monthKey, dayIndex });
      
      const scheduleRef = doc(db, 'schedules', `${userData.department}-${monthKey}`);
      const scheduleDoc = await getDoc(scheduleRef);
      
      if (scheduleDoc.exists()) {
        const scheduleData = scheduleDoc.data();
        const schedule = scheduleData.schedule || {};
        const cellStyles = scheduleData.cellStyles || {};
        
        console.log('Schedule data exists, keys:', Object.keys(schedule));
        
        // р╣Гр╕Кр╣Йр╕зр╕┤р╕Шр╕╡р╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Ъ ShiftSchedule - р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б scheduleData.schedule[memberId][dayIndex][rowType]
        const myTopShift = schedule[userData.uid]?.[dayIndex]?.['top'] || '';
        const myBottomShift = schedule[userData.uid]?.[dayIndex]?.['bottom'] || '';
        const otherTopShift = schedule[memberId]?.[dayIndex]?.['top'] || '';
        const otherBottomShift = schedule[memberId]?.[dayIndex]?.['bottom'] || '';
        
        console.log('Found shifts:', {
          myTop: myTopShift,
          myBottom: myBottomShift,
          otherTop: otherTopShift,
          otherBottom: otherBottomShift
        });
        
        setMyShifts({ top: myTopShift, bottom: myBottomShift });
        setOtherShifts({ top: otherTopShift, bottom: otherBottomShift });
        
        // р╕Фр╕╢р╕Зр╕кр╣Др╕Хр╕ер╣М
        setMyShiftStyles({ 
          top: cellStyles[`${userData.uid}-${dayIndex}-top`] || {}, 
          bottom: cellStyles[`${userData.uid}-${dayIndex}-bottom`] || {} 
        });
        
        setOtherShiftStyles({ 
          top: cellStyles[`${memberId}-${dayIndex}-top`] || {}, 
          bottom: cellStyles[`${memberId}-${dayIndex}-bottom`] || {} 
        });
      } else {
        console.log('Schedule document does not exist');
      }
    } catch (error) {
      console.error('Error fetching shifts:', error);
    } finally {
      setLoading(false);
    }
  };

  const getShiftColor = (shift, cellStyle) => {
    if (!shift || shift.trim() === '') return { className: 'text-gray-500', backgroundColor: 'transparent', color: '#6B7280' };
    
    // р╕лр╕▓р╕кр╕╡р╕Ир╕▓р╕Б shiftOptions р╕Бр╣Ир╕нр╕Щ
    const shiftOption = shiftOptions.find(option => option.name === shift);
    if (shiftOption) {
      return {
        className: '',
        backgroundColor: shiftOption.backgroundColor || '#F3F4F6',
        color: shiftOption.textColor || '#374151'
      };
    }
    
    // р╕кр╕│р╕лр╕гр╕▒р╕Ъ р╕К/р╕Ъ/р╕Ф р╣Гр╕лр╣Йр╣Гр╕Кр╣Йр╕кр╕╡р╕Ир╕▓р╕Б cellStyle
    if (['р╕К', 'р╕Ъ', 'р╕Ф'].includes(shift)) {
      return {
        className: '',
        backgroundColor: cellStyle.backgroundColor || '#F3F4F6',
        color: cellStyle.textColor || '#374151'
      };
    }
    
    // р╕кр╕╡р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ
    return { className: 'text-gray-500', backgroundColor: 'transparent', color: '#6B7280' };
  };

  const getShiftName = (shift) => {
    if (!shift || shift.trim() === '') return 'р╣Др╕бр╣Ир╕бр╕╡';
    
    const shiftOption = shiftOptions.find(option => option.name === shift);
    if (shiftOption) {
      return shiftOption.displayName || shift;
    }
    
    // р╣Бр╕Ыр╕ер╕Зр╕Кр╕╖р╣Ир╕нр╣Ар╕зр╕гр╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ
    const shiftNames = {
      'р╕К': 'р╣Ар╕Кр╣Йр╕▓',
      'р╕Ъ': 'р╕Ър╣Ир╕▓р╕в', 
      'р╕Ф': 'р╕Фр╕╢р╕Б',
      'MB': 'MB',
      'VA': 'VA',
      'O': 'O',
      'р╕Ыр╕гр╕░р╕Кр╕╕р╕б': 'р╕Ыр╕гр╕░р╕Кр╕╕р╕б',
      'р╕К*': 'р╕К*'
    };
    
    return shiftNames[shift] || shift;
  };

  const handleExchangeShift = () => {
    // TODO: Implement actual shift exchange logic
    alert('р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Бр╕ер╕Бр╣Ар╕зр╕гр╕Ир╕░р╕Цр╕╣р╕Бр╕Юр╕▒р╕Тр╕Щр╕▓р╕Хр╣Ир╕нр╣Др╕Ы');
  };

  // р╕Цр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щр╕лр╕▒р╕зр╕лр╕Щр╣Йр╕▓ р╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕зр╣Ир╕▓р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Др╕Фр╣Й
  if (isSupervisor) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 sm:p-6">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-xl shadow-lg border border-gray-100 p-8 text-center">
            <div className="text-red-600 text-6xl mb-4">ЁЯЪл</div>
            <h2 className="text-xl font-bold text-red-800 mb-2">р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Др╕Фр╣Й</h2>
            <p className="text-red-600">р╕лр╕Щр╣Йр╕▓р╕Щр╕╡р╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ</p>
          </div>
        </div>
      </div>
    );
  }

  // р╕лр╕Щр╣Йр╕▓р╣Ар╕бр╕Щр╕╣р╕лр╕ер╕▒р╕Б
  if (currentView === 'menu') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 sm:p-6">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-4">
              р╣Бр╕ер╕Бр╣Ар╕зр╕г
            </h1>
            <p className="text-gray-600">
              р╣Ар╕ер╕╖р╕нр╕Бр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕гр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г
            </p>
          </div>

          {/* Menu Cards */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {/* р╣Бр╕ер╕Бр╣Ар╕зр╕г */}
            <div 
              onClick={handleExchangeClick}
              className="group bg-white p-6 sm:p-8 rounded-2xl shadow-lg border border-gray-100 hover:shadow-xl hover:scale-105 transition-all duration-300 cursor-pointer"
            >
              <div className="flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl mb-6 group-hover:scale-110 transition-transform duration-300">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-gray-800 mb-4">р╣Бр╕ер╕Бр╣Ар╕зр╕г</h3>
              <p className="text-gray-600 leading-relaxed">
                р╕Вр╕нр╣Бр╕ер╕Бр╣Ар╕зр╕гр╕Бр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕Щр╕нр╕╖р╣Ир╕Щ
              </p>
            </div>

            {/* р╕вр╕Бр╣Ар╕зр╕г */}
            <div 
              onClick={handleGiveClick}
              className="group bg-white p-6 sm:p-8 rounded-2xl shadow-lg border border-gray-100 hover:shadow-xl hover:scale-105 transition-all duration-300 cursor-pointer"
            >
              <div className="flex items-center justify-center w-16 h-16 bg-gradient-to-r from-green-500 to-green-600 rounded-xl mb-6 group-hover:scale-110 transition-transform duration-300">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-gray-800 mb-4">р╕вр╕Бр╣Ар╕зр╕г</h3>
              <p className="text-gray-600 leading-relaxed">
                р╕Вр╕нр╕вр╕Бр╣Ар╕зр╕гр╣Гр╕лр╣Йр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕Щр╕нр╕╖р╣Ир╕Щ
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // р╕лр╕Щр╣Йр╕▓р╣Бр╕ер╕Бр╣Ар╕зр╕г
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 sm:p-6">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-2">
              {currentView === 'exchange' ? 'р╣Бр╕ер╕Бр╣Ар╕зр╕г' : 'р╕вр╕Бр╣Ар╕зр╕г'}
            </h1>
            <p className="text-gray-600">
              {currentView === 'exchange' ? 'р╣Бр╕ер╕Бр╣Ар╕зр╕гр╕Бр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕Щр╕нр╕╖р╣Ир╕Щ' : 'р╕вр╕Бр╣Ар╕зр╕гр╣Гр╕лр╣Йр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕Щр╕нр╕╖р╣Ир╕Щ'}
            </p>
          </div>
          <button
            onClick={handleBackToMenu}
            className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
          >
            р╕Бр╕ер╕▒р╕Ъ
          </button>
        </div>

        {/* Form */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-100 p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* р╣Ар╕ер╕╖р╕нр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                р╣Ар╕ер╕╖р╕нр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
              </label>
              <select
                value={selectedMember}
                onChange={handleMemberChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">р╣Ар╕ер╕╖р╕нр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И</option>
                {teamMembers.map((member) => (
                  <option key={member.id} value={member.id}>
                    {member.firstName} {member.lastName}
                  </option>
                ))}
              </select>
            </div>

            {/* р╣Ар╕ер╕╖р╕нр╕Бр╕зр╕▒р╕Щр╕Чр╕╡р╣И */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                р╣Ар╕ер╕╖р╕нр╕Бр╕зр╕▒р╕Щр╕Чр╕╡р╣И
              </label>
              <input
                type="date"
                value={selectedDate}
                onChange={handleDateChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        {/* р╣Бр╕кр╕Фр╕Зр╣Ар╕зр╕г */}
        {selectedMember && selectedDate && (
          <div className="bg-white rounded-xl shadow-lg border border-gray-100 p-6">
            <h3 className="text-xl font-bold text-gray-800 mb-4">р╣Ар╕зр╕гр╣Гр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣И {selectedDate}</h3>
            
            {loading ? (
              <div className="flex justify-center items-center h-32">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                 {/* р╣Ар╕зр╕гр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕нр╕З */}
                 <div className="border border-gray-200 rounded-lg p-4">
                   <h4 className="font-semibold text-gray-800 mb-3">р╣Ар╕зр╕гр╕Вр╕нр╕Зр╕Йр╕▒р╕Щ</h4>
                   <div className="space-y-3">
                     <div className="flex justify-between items-center">
                       <span className="text-gray-600">р╣Ар╕зр╕гр╕Ър╕Щ:</span>
                       <span 
                         className="px-3 py-1 rounded text-sm font-medium"
                         style={{
                           backgroundColor: getShiftColor(myShifts.top, myShiftStyles.top).backgroundColor,
                           color: getShiftColor(myShifts.top, myShiftStyles.top).color
                         }}
                       >
                         {getShiftName(myShifts.top)}
                       </span>
                     </div>
                     <div className="flex justify-between items-center">
                       <span className="text-gray-600">р╣Ар╕зр╕гр╕ер╣Ир╕▓р╕З:</span>
                       <span 
                         className="px-3 py-1 rounded text-sm font-medium"
                         style={{
                           backgroundColor: getShiftColor(myShifts.bottom, myShiftStyles.bottom).backgroundColor,
                           color: getShiftColor(myShifts.bottom, myShiftStyles.bottom).color
                         }}
                       >
                         {getShiftName(myShifts.bottom)}
                       </span>
                     </div>
                   </div>
                 </div>

                                 {/* р╣Ар╕зр╕гр╕Вр╕нр╕Зр╕Др╕Щр╕Чр╕╡р╣Ир╕Ир╕░р╣Бр╕ер╕Б */}
                 <div className="border border-gray-200 rounded-lg p-4">
                   <h4 className="font-semibold text-gray-800 mb-3">
                     р╣Ар╕зр╕гр╕Вр╕нр╕З {teamMembers.find(m => m.id === selectedMember)?.firstName} {teamMembers.find(m => m.id === selectedMember)?.lastName}
                   </h4>
                   <div className="space-y-3">
                     <div className="flex justify-between items-center">
                       <span className="text-gray-600">р╣Ар╕зр╕гр╕Ър╕Щ:</span>
                       <span 
                         className="px-3 py-1 rounded text-sm font-medium"
                         style={{
                           backgroundColor: getShiftColor(otherShifts.top, otherShiftStyles.top).backgroundColor,
                           color: getShiftColor(otherShifts.top, otherShiftStyles.top).color
                         }}
                       >
                         {getShiftName(otherShifts.top)}
                       </span>
                     </div>
                     <div className="flex justify-between items-center">
                       <span className="text-gray-600">р╣Ар╕зр╕гр╕ер╣Ир╕▓р╕З:</span>
                       <span 
                         className="px-3 py-1 rounded text-sm font-medium"
                         style={{
                           backgroundColor: getShiftColor(otherShifts.bottom, otherShiftStyles.bottom).backgroundColor,
                           color: getShiftColor(otherShifts.bottom, otherShiftStyles.bottom).color
                         }}
                       >
                         {getShiftName(otherShifts.bottom)}
                       </span>
                     </div>
                   </div>
                 </div>
              </div>
            )}

            {/* р╕Ыр╕╕р╣Ир╕бр╣Бр╕ер╕Бр╣Ар╕зр╕г */}
            {!loading && (myShifts.top || myShifts.bottom) && (otherShifts.top || otherShifts.bottom) && (
              <div className="mt-6 text-center">
                <button
                  onClick={handleExchangeShift}
                  className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                >
                  {currentView === 'exchange' ? 'р╣Бр╕ер╕Бр╣Ар╕зр╕г' : 'р╕вр╕Бр╣Ар╕зр╕г'}
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ExchangeShift;
